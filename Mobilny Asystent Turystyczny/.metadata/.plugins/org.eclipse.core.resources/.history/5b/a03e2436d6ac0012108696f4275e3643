package com.java.mat;

import java.io.InputStream;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import android.util.Log;

import com.google.android.gms.maps.model.LatLng;

public class GMapV2Places {
	
	public GMapV2Places() {
		
	}
	
	 public Document getDocument(LatLng loc) {
	        String url = "https://maps.googleapis.com/maps/api/place/search/xml?" 
	                + "location=" + loc.latitude + "," + loc.longitude  
	                + "&radius=1000" + ""
	                + "&types=restaurant" + ""
	                + "&sensor=false" 
	                + "&key=" + "AIzaSyASEwRkZt-0VSm5aPL32rbDD2CwpaZdxlE";
	        
	        try {
	            HttpClient httpClient = new DefaultHttpClient();
	            HttpContext localContext = new BasicHttpContext();
	            HttpPost httpPost = new HttpPost(url);
	            HttpResponse response = httpClient.execute(httpPost, localContext);
	            InputStream in = response.getEntity().getContent();
	            DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
	            Document doc = builder.parse(in);
	            return doc;
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return null;
	 }
	 
	 public ArrayList<LatLng> getPlaces (Document doc) {
		 NodeList nl1,nl2,nl3;
		 ArrayList<LatLng> listGeopoints = new ArrayList<LatLng>();
		 nl1 = doc.getElementsByTagName("geometry");
		 if(nl1.getLength() > 0){
			 for (int i=0;i<nl1.getLength();i++){
				 Node node1 = nl1.item(i);
				 nl2 = node1.getChildNodes();
				 
				 Node locationNode = nl2.item(getNodeIndex(nl2,"location"));
				 nl3=locationNode.getChildNodes();
				 Node latNode = nl3.item(getNodeIndex(nl3, "lat"));
				 double lat = Double.parseDouble(latNode.getTextContent());
				 Node lngNode = nl3.item(getNodeIndex(nl3, "lng"));
				 double lng = Double.parseDouble(lngNode.getTextContent());
				 listGeopoints.add(new LatLng(lat, lng));
				 
			 }
		 }
		 return listGeopoints;
		 
	 }
	 
	 private int getNodeIndex(NodeList nl, String nodename) {
	        for(int i = 0 ; i < nl.getLength() ; i++) {
	            if(nl.item(i).getNodeName().equals(nodename))
	                return i;
	        }
	        return -1;
	    }
	 
	 
}
